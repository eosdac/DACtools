{
	"default" : {
		"html": `
				<p>
					Welcome to the eosDAC tools App. With this suite you can... do a lot. lol.
		 		</p>
		 		`
	}

	,"generate" : {
		"html": `
				<section>
						<h2>Generate EOS Key Pair(s)</h2>
						<p>
							Specify the number (1-100) of key pairs you want and click "Generate". This process does not require an active internet connection. If you feel more save to enable flight mode...
						</p>
						<form class="pure-form">
							<input type="number" name="amount" min="1" max ="100" value="1" size="3">
							<!-- <select name="format">
								<option value="text">Text</option>
								<option value="csv">csv</option>
								<option value="json">Json</option>
							</select> -->
							<button data-event='["generateKeyPair"]' class="pure-button pure-button-primary">Generate</button>
							<label><input type="checkbox" name="savefile">Save to file</label>
						</form>
						<div class="msg" style="height:20px; font-size:10px;line-height:20px"></div>
						<textarea id="generateKeyPair_output" style="height:200px;width:760px;font-size:11px"></textarea>
				</section>
				`
	}

	,"create_account" : {
		"html": `
				<section>
					<h2>Create New Account</h2>
					<p>
						Create a new account, buyrambytes and delegate bandwith
					</p>
					<form class="pure-form pure-form-stacked">	
						<input type="text" name="newaccountname" placeholder="New Accountname">
						<input type="text" name="keyowner" placeholder="@owner pub key">
						<input type="text" name="keyactive" placeholder="@active pub key">
						<input type="text" name="rambytes" value="4000" placeholder="RAM in Bytes">
						<input type="text" name="netquant" value="0.01 EOS" placeholder="Stake NET quantity">
						<input type="text" name="cpuquant" value="0.01 EOS" placeholder="Stake CPU quantity">
						<label><input type="checkbox" name="transfer">Transfer</label>
						<button data-event='["createNewAccount"]' class="pure-button pure-button-primary">Create</button>
					</form>
				</section>
				`
	}
	,"distribute" : {
		"html": `
				<section>
					<h2>Drop Tokens</h2>
					<p>
						Drop tokens to a list of accounts. Input file must be a csv with two columns (account_name, asset_amount). The token contract needs to have a transfer method.
					</p>
					<form class="pure-form pure-form-stacked">
						<input type="text" name="contractaccountname" placeholder="Contract account">	
						<input type="file" name="input.csv">
						<button data-event='["droptokens"]' class="pure-button pure-button-primary">Start</button>
					</form>
				</section>
				`
	}

	,"load_contract" : {
		"html": `
				<section>
					<h2>Load contract and interact</h2>
					<p>
						Input contract account name.
					</p>
					<form class="pure-form pure-form-stacked">
						<input type="text" id="contract_name" name="account_name" placeholder="Contract account" >	
						<button data-event='["loadContract"]' class="pure-button pure-button-primary">Load</button>
					</form>
					<div id="loadContract_output"></div>
				</section>
				`
	}

	,"deploy_contract" : {
		"html": `
				<section>
					<h2>Deploy Contract</h2>
					<form class="pure-form pure-form-stacked">
						<!-- use ids here, we don't serialize the form because of the file inputs -->
						<label for="abifile">
								Abi File<input type="file" name="abi" id="abifile">
						</label>
						<label for="wasmfile">
							Wasm File<input type="file"  name="wasm" id="wasmfile">
						</label>
						<button data-event='["deployContract"]' class="pure-button pure-button-primary">Deploy</button>
					</form>
					<div class="output"></div>
				</section>
				`
	}

	,"getbalance" : {
		"html": `
				<section>
					<h2>Get the token balance from an account</h2>
					<form class="pure-form pure-form-stacked">
						<input type="text" name="code" placeholder="contract name">
						<input type="text" name="symbol" placeholder="token symbol">
						<input type="text" name="account" placeholder="account name">
						<button data-event='["getTokenBalance"]' class="pure-button pure-button-primary">Test</button>
					</form>
					<div class="output"></div>
				</section>
				`
	}

	,"rammarket" : {
		"html": `
				<section>
					<h2>Buy RAM</h2>
					<form class="pure-form pure-form-stacked">
						<label for="payer">
							payer<input type="text" name="payer" placeholder="account_name" autocomplete="off">
						</label>
						<label for="receiver">
							receiver<input type="text" name="receiver" placeholder="account_name" autocomplete="off">
						</label>
						<label for="quant">
							quant<input type="text" name="quant" placeholder="asset" autocomplete="off">
						</label>
						<button data-event='["buyRam"]' class="pure-button pure-button-primary button-success">BUY</button>
					</form>
				</section>
				<section>
					<h2>Sell RAM</h2>
					<form class="pure-form pure-form-stacked">
						<label for="account">
							account<input type="text" name="account" placeholder="account_name" autocomplete="off">
						</label>
						<label for="bytes">
							bytes<input type="text" name="bytes" placeholder="uint64" autocomplete="off">
						</label>
						<button data-event='["sellRam"]' class="pure-button pure-button-primary button-error">SELL</button>
					</form>
				</section>
				`
	}

	,"distribute_tokens" : {
		"html": `
				<section>
					<h2>Airdrop Tokens</h2>
					<form class="pure-form pure-form-stacked">
						<!-- use ids here, we don't serialize the form because of the file inputs -->
						<label for="addressfile">
								Input <input type="file" name="addressfile" id="addressfile">
						</label>
						
						<button data-event='["distributeTokens"]' class="pure-button pure-button-primary">Start</button>
					</form>
					<div class="output"></div>
				</section>
				`
	}

	,"test" : {
		"html": `
				<section>
					<h2>Test dev</h2>
					<form class="pure-form pure-form-stacked">
						<button data-event='["test"]' class="pure-button pure-button-primary">Test</button>
					</form>
					<div class="output"></div>
				</section>
				`
	}


}